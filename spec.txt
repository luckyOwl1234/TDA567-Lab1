// 2. Specifying a sorting algorithm

    1a.
    predicate sorted(s: seq<int>)
    {
        forall j, k :: 0 <= j < k < |s| ==> s[j] <= s[k]
    }


    

    predicate sortedTwo(s: seq<int>)
    {
        0 < |s| ==> (forall i :: 0 < i < |s| ==> s[0] <= s[i]) && sortedTwo(s[1..])
    }

    ghost method SortedSequence(s: seq<int>)
    ensures sorted();



    3a.
      The predicate evaluates if the two sequences have the same values and if the amount of each
      value are the same.

      Example:  (1,2,2,3) is the same as (2,1,3,2) because you have the same amount of all the
      individuale values.
      Example:  (1,1) is not the same as (1) because in the first one you have two ones and
      the later only has one, one.

    3b.
      predicate p2(a : seq<int>, b : seq<int>){
          forall i : int :: 0 < i < |a| ==> countNumbers(a, a[i]) == countNumbers(b, a[i])
      }

      function countNumbers(s : seq<int>, value : int) : int
      {
          if |s| == 0 then 0 else countNumbers(s[1..], value)
      }

    4a.
      sortArray(a : Array)
      requires a != null;
      ensures forall i, j : int :: 0 <= j < i < a.Length ==> a[j] <= a[i];

      modifies a;






      -------------------------------------------------------------


           predicate p2(a : seq<int>, b : seq<int>){
                forall i :: 0 < i < |a| ==> countNumber(a[i],a) == countNumber(a[i],b)
            }

           function countNumber(val : int, s : seq<int>) : int
      {
        if |s| == 0 then 0 else
        if val == s[0] then countNumber(val,s[1..]) else countNumber(val,s[1..])





        predicate p2(a : seq<int>, b : seq<int>)
      {
          forall i :: 0 < i < |a| ==> Count(a[i],a) == Count(a[i],b)
      }

      function Count(val : int, s : seq<int>) : int
      {
        if |s| == 0 then 0 else
        if val == s[0] then Count(val, s[1..]) else Count(val, s[1..])
      }