// 2. Specifying a sorting algorithm

    1a.
    predicate sorted(s: seq<int>)
    {
        forall j, k :: 0 <= j < k < |s| ==> s[j] <= s[k]
    }

    ghost method SortedSequence(s: seq<int>)
    

    predicate sortedTwo(s: seq<int>)
    {
        0 < |s| ==> (forall i :: 0 < i < |s| ==> s[0] <= s[i]) && sortedTwo(s[1..])
    }



    3a.
      The predicate evaluates if the two sequences have the same values and if the amount of the
      different values are the same.

      Example:  (1,2,2,3) is the same as (2,1,3,2) because you have the same amount of all the
      individuale values
      Example:  (1,1) is not the same as (1) because in the first one you have two ones and in
      the latter only one one

    3b.


    4a.
      sortArray(a : Array)
      requires a != null;


      ensures forall i, j : int :: 0 <= j < i < a.Length ==> a[j] <= a[i];