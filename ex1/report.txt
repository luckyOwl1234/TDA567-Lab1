public boolean addWorkingPeriod(String employee, int starttime, int endtime);

requires:
  employee is a non-null string
ensures:
  if starttime < 0 or endtime >= size or starttime > endtime then
    returns false and the schedule is unchanged
  otherwise
    if for any hour in the interval starttime to endtime the length of workingEmployees is equal to requiredNumber then
      returns false and the schedule is unchanged
    otherwise
      if for any hour in the interval starttime to endtime there is a string in workingEmployees which equal employee then
        returns false and the schedule is unchanged
      otherwise
        returns true,
        for i between starttime and endtime, workingEmployees contain a string equal to employee and
        the rest of the schedule is unchanged

Input space: s != null, 0 <= i < i1, i < i1 <= size

Partition #1: No setRequiredNumber
    AddWorkerWhenNoneIsNeeded_addWorkingPeriod_part1 input: s = John, i = 2, i1 = 4, expected: DoNotAddWorker
Partition #2: i < i1
    AddOnePerson_addWorkingPeriod_part2 input: s = John, i = 2, i1 = 4, expected: AddWorker
Partition #3: i > i1
    StartTimeBiggerThanEndTime_addWorkingPeriod_part3 input: s = John, i = 4, i = 2, expected: DoNotAddWorker
Partition #4: i > i1
    WrongReturnData_addWorkerPeriod_part4 input: s = John, i = 4, i = 2, expected: ReturnFalse
Partition #5: i < 0
    StartTimeLessThanZero_addWorkingPeriod_part5 input: s = John, i = -1, i1 = 4, expected: DoNotAddWorker
Partition #6: i2 > size
    EndTimeHigherThanSize_addWorkingPeriod_part6 input: s = John, i = 2, i1 = 25, expected: DoNotAddWorker
Partition #7: setRequiredNumber(1,2,4)
    AddMoreWorkersThanNeeded_addWorkerPeriod_part7 input: {s = John, i = 2, i1 = 4}, {s = Mark, i = 2, i1 = 4}
    expected: John Added, Mark not Added
Partition #8: setRequiredNumber(1,2,4) and setRequiredNumber(1,5,6)
    AddWorkerOverBiggerIntervalThanNeeded_addWorkerPeriod_part8 input {s = John, i = 2, i1 = 4}, {s = Mark, i = 2, i1 = 6}
    expected: John Added, Mark not Added

Border cases: TODO

Found bugs: addWorkerPeriod(1, 4, 2) returns true even if it doesnt add a worker to the schedule.

public String[] workingEmployees(int starttime, int endtime);

requires:
  starttime >= 0 and endtime < size
ensures:
  if starttime <= endtime then
    returns an array with distinct strings -- a string appears in the return array if and only if
    it appears in the workingEmployees of at least one hour in the interval starttime to endtime
  otherwise
    returns an empty array
  and in either case the schedule is unchanged

Input space: TODO

Partition #1: TODO
Partition #n: TODO

Border cases: TODO

Found bugs: TODO
